"""Generated message classes for clouddebugger version v2.

Lets you examine the stack and variables of your running application without
stopping or slowing it down.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from protorpc import messages as _messages

from googlecloudsdk.third_party.apitools.base.py import encoding


package = 'clouddebugger'


class Breakpoint(_messages.Message):
  """Represents the breakpoint specification, status and results.

  Enums:
    ActionValueValuesEnum: Defines what to do when the breakpoint hits.
    LogLevelValueValuesEnum: Indicates the severity of the log. Only relevant
      when action is "LOG".

  Fields:
    action: Defines what to do when the breakpoint hits.
    condition: A condition to trigger the breakpoint. The condition is a
      compound boolean expression composed using expressions in a programming
      language at the source location.
    createTime: The time this breakpoint was created by the server. The value
      is in seconds resolution.
    evaluatedExpressions: The evaluated expressions' values at breakpoint
      time. The evaluated expressions appear in exactly the same order they
      are listed in the 'expressions' field. The 'name' field holds the
      original expression text, the 'value'/'members' field holds the result
      of the evaluated expression. If the expression can not be evaluated, an
      error text is placed in the value field.
    expressions: A list of read-only expressions to evaluate at the breakpoint
      location. The expressions are composed using expressions in the
      programming language at the source location. If the breakpoint action is
      "LOG", the evaluated expressions are included in log statements.
    finalTime: The time this breakpoint was finalized as seen by the server.
      The value is in seconds resolution.
    id: Breakpoint identifier, unique in the scope of the debuggee.
    isFinalState: When true, indicates that this is a final result and the
      breakpoint state will not change from here on.
    location: The breakpoint source location.
    logLevel: Indicates the severity of the log. Only relevant when action is
      "LOG".
    logMessageFormat: Only relevant when action is "LOG". Defines the message
      to log when the breakpoint hits. The message may include parameter
      placeholders "$0", "$1", etc. These placeholders will be replaced with
      the evaluated value of the appropriate expression. Expressions not
      referenced in "log_message_format" will not be logged. Example:
      "Poisonous message received, id = $0, count = $1" with expressions = [
      "message.id", "message.count" ].
    stackFrames: The stack at breakpoint time.
    status: Breakpoint status. The status includes an error flag and a human
      readable message. This field will usually stay unset. The message can be
      either informational or error. Nevertheless, clients should always
      display the text message back to the user.  Error status of a breakpoint
      indicates complete failure.  Example (non-final state): 'Still loading
      symbols...'  Examples (final state): 'Failed to insert breakpoint'
      referring to breakpoint, 'Field f not found in class C' referring to
      condition, ...
    userEmail: The e-mail of the user that created this breakpoint
    variableTable: The variable_table exists to aid with computation, memory
      and network traffic optimization.  It enables storing a variable once
      and reference it from multiple variables, including variables stored in
      the variable_table itself. For example, the object 'this', which may
      appear at many levels of the stack, can have all of it's data stored
      once in this table.  The stack frame variables then would hold only a
      reference to it.  The variable var_index field is an index into this
      repeated field. The stored objects are nameless and get their name from
      the referencing variable. The effective variable is a merge of the
      referencing veariable and the referenced variable.
  """

  class ActionValueValuesEnum(_messages.Enum):
    """Defines what to do when the breakpoint hits.

    Values:
      CAPTURE: Capture stack frame and variables and update the breakpoint.
        The data is only captured once. After that the breakpoint is set in a
        final state.
      LOG: Log each breakpoint hit. The breakpoint will remain active until
        deleted or expired.
    """
    CAPTURE = 0
    LOG = 1

  class LogLevelValueValuesEnum(_messages.Enum):
    """Indicates the severity of the log. Only relevant when action is "LOG".

    Values:
      INFO: Information log message.
      WARNING: Warning log message.
      ERROR: Error log message.
    """
    INFO = 0
    WARNING = 1
    ERROR = 2

  action = _messages.EnumField('ActionValueValuesEnum', 1)
  condition = _messages.StringField(2)
  createTime = _messages.StringField(3)
  evaluatedExpressions = _messages.MessageField('Variable', 4, repeated=True)
  expressions = _messages.StringField(5, repeated=True)
  finalTime = _messages.StringField(6)
  id = _messages.StringField(7)
  isFinalState = _messages.BooleanField(8)
  location = _messages.MessageField('SourceLocation', 9)
  logLevel = _messages.EnumField('LogLevelValueValuesEnum', 10)
  logMessageFormat = _messages.StringField(11)
  stackFrames = _messages.MessageField('StackFrame', 12, repeated=True)
  status = _messages.MessageField('StatusMessage', 13)
  userEmail = _messages.StringField(14)
  variableTable = _messages.MessageField('Variable', 15, repeated=True)


class CloudRepoSourceContext(_messages.Message):
  """A CloudRepoSourceContext denotes a particular revision in a cloud repo (a
  repo hosted by the Google Cloud Platform).

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    repoId: The ID of the repo.
    revisionId: A revision ID.
  """

  aliasName = _messages.StringField(1)
  repoId = _messages.MessageField('RepoId', 2)
  revisionId = _messages.StringField(3)


class CloudWorkspaceId(_messages.Message):
  """A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud
  workspace is a place associated with a repo where modified files can be
  stored before they are committed.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    repoId: The ID of the repo containing the workspace.
  """

  name = _messages.StringField(1)
  repoId = _messages.MessageField('RepoId', 2)


class CloudWorkspaceSourceContext(_messages.Message):
  """A CloudWorkspaceSourceContext denotes a workspace at a particular
  snapshot.

  Fields:
    snapshotId: The ID of the snapshot. An empty snapshot_id refers to the
      most recent snapshot.
    workspaceId: The ID of the workspace.
  """

  snapshotId = _messages.StringField(1)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 2)


class ClouddebuggerControllerDebuggeesBreakpointsListRequest(_messages.Message):
  """A ClouddebuggerControllerDebuggeesBreakpointsListRequest object.

  Fields:
    debuggeeId: Identifies the debuggee.
    waitToken: A wait token that, if specified, blocks the method call until
      the list of active breakpoints has changed, or a server selected timeout
      has expired.  The value should be set from the last returned response.
      The error code google.rpc.Code.ABORTED is returned on wait timeout
      (which does not require the agent to re-register with the server)
  """

  debuggeeId = _messages.StringField(1, required=True)
  waitToken = _messages.StringField(2)


class ClouddebuggerControllerDebuggeesBreakpointsUpdateRequest(_messages.Message):
  """A ClouddebuggerControllerDebuggeesBreakpointsUpdateRequest object.

  Fields:
    debuggeeId: Identifies the debuggee being debugged.
    id: Breakpoint identifier, unique in the scope of the debuggee.
    updateActiveBreakpointRequest: A UpdateActiveBreakpointRequest resource to
      be passed as the request body.
  """

  debuggeeId = _messages.StringField(1, required=True)
  id = _messages.StringField(2, required=True)
  updateActiveBreakpointRequest = _messages.MessageField('UpdateActiveBreakpointRequest', 3)


class ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest(_messages.Message):
  """A ClouddebuggerDebuggerDebuggeesBreakpointsDeleteRequest object.

  Fields:
    breakpointId: The breakpoint to delete.
    debuggeeId: The debuggee id to delete the breakpoint from.
  """

  breakpointId = _messages.StringField(1, required=True)
  debuggeeId = _messages.StringField(2, required=True)


class ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest(_messages.Message):
  """A ClouddebuggerDebuggerDebuggeesBreakpointsGetRequest object.

  Fields:
    breakpointId: The breakpoint to get.
    debuggeeId: The debuggee id to get the breakpoint from.
  """

  breakpointId = _messages.StringField(1, required=True)
  debuggeeId = _messages.StringField(2, required=True)


class ClouddebuggerDebuggerDebuggeesBreakpointsListRequest(_messages.Message):
  """A ClouddebuggerDebuggerDebuggeesBreakpointsListRequest object.

  Enums:
    ActionValueValueValuesEnum: Only breakpoints with the specified action
      will pass the filter.

  Fields:
    action_value: Only breakpoints with the specified action will pass the
      filter.
    debuggeeId: The debuggee id to list breakpoint from.
    includeAllUsers: When set to true the response includes the list of
      breakpoints set by any user, otherwise only breakpoints set by the
      caller.
    includeInactive: When set to true the response includes active and
      inactive breakpoints, otherwise only active breakpoints are returned.
    stripResults: When set to true the response breakpoints will be stripped
      of the results fields: stack_frames, evaluated_expressions and
      variable_table.
    waitToken: A wait token that, if specified, blocks the call until the
      breakpoints list has changed, or a server selected timeout has expired.
      The value should be set from the last response to ListBreakpoints. The
      error code ABORTED is returned on wait timeout, which should be called
      again with the same wait_token.
  """

  class ActionValueValueValuesEnum(_messages.Enum):
    """Only breakpoints with the specified action will pass the filter.

    Values:
      CAPTURE: <no description>
      LOG: <no description>
    """
    CAPTURE = 0
    LOG = 1

  action_value = _messages.EnumField('ActionValueValueValuesEnum', 1)
  debuggeeId = _messages.StringField(2, required=True)
  includeAllUsers = _messages.BooleanField(3)
  includeInactive = _messages.BooleanField(4)
  stripResults = _messages.BooleanField(5)
  waitToken = _messages.StringField(6)


class ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest(_messages.Message):
  """A ClouddebuggerDebuggerDebuggeesBreakpointsSetRequest object.

  Fields:
    breakpoint: A Breakpoint resource to be passed as the request body.
    debuggeeId: The debuggee id to set the breakpoint to.
  """

  breakpoint = _messages.MessageField('Breakpoint', 1)
  debuggeeId = _messages.StringField(2, required=True)


class ClouddebuggerDebuggerDebuggeesListRequest(_messages.Message):
  """A ClouddebuggerDebuggerDebuggeesListRequest object.

  Fields:
    includeInactive: When set to true the result includes all debuggees,
      otherwise only debugees that are active.
    project: Set to the project number of the Google Cloud Platform to list
      the debuggees that are part of that project.
  """

  includeInactive = _messages.BooleanField(1)
  project = _messages.StringField(2)


class Debuggee(_messages.Message):
  """Represents the application to debug. The application may include one or
  more replicated processes executing the same code. Each of these processes
  is attached with a debugger agent, carrying out the debugging commands. The
  agents attached to the same debuggee are identified by using exactly the
  same fields' values when registering.

  Messages:
    LabelsValue: A set of custom debuggee properties, populated by the agent,
      to be displayed to the user.

  Fields:
    agentVersion: Version ID of the agent release. The version ID is
      structured as following: "domain/type/vmajor.minor" (for example
      "google.com/gcp-java/v1.1").
    description: A human readable description of the debuggee. Recommended to
      include human readable project name, environment name, and version
      information .
    id: Debuggee unique identifer generated by the server.
    isDisabled: If set to true, indicates that the agent should disable itself
      and detach from the debuggee.
    isInactive: If set to true indicates that the debuggee has not been seen
      by the Controller service in the last active time period (defined by the
      server).
    labels: A set of custom debuggee properties, populated by the agent, to be
      displayed to the user.
    project: The project the debuggee is associated with. Use the project
      number when registering a Google Cloud Platform project.
    sourceContexts: Repository snapshots containing the source code of the
      project.
    status: Human readable message to be displayed to the user about this
      debuggee. Absense of this field indicates no message. The message can be
      either informational or error.
    uniquifier: The debuggee uniqifier within the project. Any string that id
      the application within the project can be used. Recomended to include
      environement and version or build id's.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class LabelsValue(_messages.Message):
    """A set of custom debuggee properties, populated by the agent, to be
    displayed to the user.

    Messages:
      AdditionalProperty: An additional property for a LabelsValue object.

    Fields:
      additionalProperties: Additional properties of type LabelsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a LabelsValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  agentVersion = _messages.StringField(1)
  description = _messages.StringField(2)
  id = _messages.StringField(3)
  isDisabled = _messages.BooleanField(4)
  isInactive = _messages.BooleanField(5)
  labels = _messages.MessageField('LabelsValue', 6)
  project = _messages.StringField(7)
  sourceContexts = _messages.MessageField('SourceContext', 8, repeated=True)
  status = _messages.MessageField('StatusMessage', 9)
  uniquifier = _messages.StringField(10)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class FormatMessage(_messages.Message):
  """Represents a message with parameters.

  Fields:
    format: Format template of the message. The "format" uses placeholders
      "$0", "$1", etc. to reference parameters. "$$" can be used to denote the
      '$' character. Examples:     "Failed to load '$0' which helps debug $1
      the first time it      is loaded.  Again, $0 is very important."
      "Please pay $$10 to use $0 instead of $1."
    parameters: Optional parameters to be embedded into the message.
  """

  format = _messages.StringField(1)
  parameters = _messages.StringField(2, repeated=True)


class GerritSourceContext(_messages.Message):
  """A SourceContext referring to a Gerrit project.

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    gerritProject: The full project name within the host. Projects may be
      nested, so "project/subproject" is a valid project name. The "repo name"
      is hostURI/project.
    hostUri: The URI of a running Gerrit instance.
    revisionId: A revision (commit) ID.
  """

  aliasName = _messages.StringField(1)
  gerritProject = _messages.StringField(2)
  hostUri = _messages.StringField(3)
  revisionId = _messages.StringField(4)


class GetBreakpointResponse(_messages.Message):
  """The response of getting breakpoint information.

  Fields:
    breakpoint: The complete breakpoint state. The fields 'id' and 'location'
      are guranteed to be set.
  """

  breakpoint = _messages.MessageField('Breakpoint', 1)


class GitSourceContext(_messages.Message):
  """A GitSourceContext denotes a particular revision in a third party Git
  repository (e.g. GitHub).

  Fields:
    revisionId: Git commit hash. required.
    url: Git repository URL.
  """

  revisionId = _messages.StringField(1)
  url = _messages.StringField(2)


class ListActiveBreakpointsResponse(_messages.Message):
  """The response of listing active breakpoints.

  Fields:
    breakpoints: List of all active breakpoints. The fields 'id' and
      'location' are guranteed to be set on each breakpoint.
    nextWaitToken: A wait token that can be used in the next method call to
      block until the list of breakpoints changes.
  """

  breakpoints = _messages.MessageField('Breakpoint', 1, repeated=True)
  nextWaitToken = _messages.StringField(2)


class ListBreakpointsResponse(_messages.Message):
  """The response of listing breakpoints.

  Fields:
    breakpoints: List of all breakpoints with complete state. The fields 'id'
      and 'location' are guranteed to be set on each breakpoint.
    nextWaitToken: A wait token that can be used in the next call to
      ListBreakpoints to block until the list of breakpoints has changes.
  """

  breakpoints = _messages.MessageField('Breakpoint', 1, repeated=True)
  nextWaitToken = _messages.StringField(2)


class ListDebuggeesResponse(_messages.Message):
  """The response of listing debuggees.

  Fields:
    debuggees: The list of debuggees accessible to the calling user. Note that
      the description field is the only human readable field that should be
      displayed to the user. The fields 'debuggee.id' and  'description' are
      guranteed to be set on each debuggee.
  """

  debuggees = _messages.MessageField('Debuggee', 1, repeated=True)


class ProjectRepoId(_messages.Message):
  """Selects a repo using a Google Cloud Platform project ID (e.g. winged-
  cargo-31) and a repo name within that project.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  projectId = _messages.StringField(1)
  repoName = _messages.StringField(2)


class RegisterDebuggeeRequest(_messages.Message):
  """The request to register a debuggee.

  Fields:
    debuggee: The debuggee information to register. The fields 'project',
      'uniquifier', 'description' and 'agent_version' of the debuggee must be
      set.
  """

  debuggee = _messages.MessageField('Debuggee', 1)


class RegisterDebuggeeResponse(_messages.Message):
  """The response of registering a debuggee.

  Fields:
    debuggee: The debuggee resource. The field 'id' is guranteed to be set (in
      addition to the echoed fields).
  """

  debuggee = _messages.MessageField('Debuggee', 1)


class RepoId(_messages.Message):
  """A unique identifier for a cloud repo.

  Fields:
    projectRepoId: A combination of a project ID and a repo name.
    uid: A server-assigned, globally unique identifier.
  """

  projectRepoId = _messages.MessageField('ProjectRepoId', 1)
  uid = _messages.StringField(2)


class SetBreakpointResponse(_messages.Message):
  """The response of setting a breakpoint.

  Fields:
    breakpoint: The breakpoint resource. The field 'id' is guranteed to be set
      (in addition to the echoed fileds).
  """

  breakpoint = _messages.MessageField('Breakpoint', 1)


class SourceContext(_messages.Message):
  """A SourceContext is a reference to a tree of files. A SourceContext
  together with a path point to a unique revision of a single file or
  directory.

  Fields:
    cloudRepo: A SourceContext referring to a revision in a cloud repo.
    cloudWorkspace: A SourceContext referring to a snapshot in a cloud
      workspace.
    gerrit: A SourceContext referring to a Gerrit project.
    git: A SourceContext referring to any third party Git repo (e.g. GitHub).
  """

  cloudRepo = _messages.MessageField('CloudRepoSourceContext', 1)
  cloudWorkspace = _messages.MessageField('CloudWorkspaceSourceContext', 2)
  gerrit = _messages.MessageField('GerritSourceContext', 3)
  git = _messages.MessageField('GitSourceContext', 4)


class SourceLocation(_messages.Message):
  """Represents a location in the source code.

  Fields:
    line: The line inside the file (first line value is '1').
    path: A path to the source file within the source context of the target
      binary.
  """

  line = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  path = _messages.StringField(2)


class StackFrame(_messages.Message):
  """Represents a stack frame context.

  Fields:
    arguments: The set of arguments passed to this function Note that this
      might not be populated for all stack frames.
    function: The unmangled function name at the call site.
    locals: The set of local variables at the stack frame location. Note that
      this might not be populated for all stack frames.
    location: The source location of the call site.
  """

  arguments = _messages.MessageField('Variable', 1, repeated=True)
  function = _messages.StringField(2)
  locals = _messages.MessageField('Variable', 3, repeated=True)
  location = _messages.MessageField('SourceLocation', 4)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" or "email:<ldap>" to
      include in api requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class StatusMessage(_messages.Message):
  """Represents a contextual status message. The message can indicate an error
  or informational status, and refer to specific parts of the containing
  object. For example, the Breakpoint.status field can indicate an error
  referring to the BREAKPOINT_SOURCE_LOCATION with the message "Location not
  found".

  Enums:
    RefersToValueValuesEnum: Reference to which the message applies.

  Fields:
    description: Status message text.
    isError: Distinguishes errors from informational messages.
    refersTo: Reference to which the message applies.
  """

  class RefersToValueValuesEnum(_messages.Enum):
    """Reference to which the message applies.

    Values:
      UNSPECIFIED: The status doesn't refer to any particular input.
      BREAKPOINT_SOURCE_LOCATION: The message applies to the breakpoint and is
        related to its location.
      BREAKPOINT_CONDITION: The message applies to the breakpoint and is
        related to its condition.
      BREAKPOINT_EXPRESSION: The message applies to the breakpoint and is
        related to its expressions.
      VARIABLE_NAME: The message applies to the entire variable.
      VARIABLE_VALUE: The message applies to variable value (variable name is
        valid).
    """
    UNSPECIFIED = 0
    BREAKPOINT_SOURCE_LOCATION = 1
    BREAKPOINT_CONDITION = 2
    BREAKPOINT_EXPRESSION = 3
    VARIABLE_NAME = 4
    VARIABLE_VALUE = 5

  description = _messages.MessageField('FormatMessage', 1)
  isError = _messages.BooleanField(2)
  refersTo = _messages.EnumField('RefersToValueValuesEnum', 3)


class UpdateActiveBreakpointRequest(_messages.Message):
  """The request to update an active breakpoint.

  Fields:
    breakpoint: The updated breakpoint information. The field 'id' must be
      set.
  """

  breakpoint = _messages.MessageField('Breakpoint', 1)


class UpdateActiveBreakpointResponse(_messages.Message):
  """The response of updating an active breakpoint. The message is defined to
  allow future extensions.
  """



class Variable(_messages.Message):
  """Represents a variable or an argument possibly of a compound object type.
  1. A simple variable such as,      int x = 5    is represented as:      {
  name: "x", value: "5" }  2. A compound object such as,      struct T {
  int m1;        int m2;      };      T x = { 3, 7 };    is represented as: {
  name: "x",      members { name: "m1", value: "3" },      members { name:
  "m2", value: "7" }    }  3. A pointer where the pointee was captured such
  as,      T x = { 3, 7 };      T* p = &x;    is represented as: {      name:
  "p",      value: "0x00500500",      members { name: "m1", value: "3" },
  members { name: "m2", value: "7" }    }  4. A pointer where the pointee was
  not captured or is inaccessible such as,      T* p = new T;    is
  represented as:      { name: "p", value: "0x00400400", members { value:
  "<unavailable>" } }    the value text should decribe the reason for the
  missing value.    such as <optimized out>, <inaccessible>, <pointers limit
  reached>.     note that a null pointer should not have members.  5. An
  unnamed value such as,      int* p = new int(7);    is represented as,
  { name: "p", value: "0x00500500", members { value: "7" } }  6. An unnamed
  pointer where the pointee was not captured such as,      int* p = new
  int(7);      int** pp = &p;    is represented as: {      name: "pp",
  value: "0x00500500",      members { value: "0x00400400", members { value:
  "<unavailable>" } }    }  To optimize computation, memory and network
  traffic, variables that repeat in the output multiple times can be stored
  once in a shared variable table and be referenced using the var_index field.
  The variables stored in the shared table are nameless and are essentially a
  partition of the complete variable.  To reconstruct the complete variable
  merge the referencing variable with the referenced variable.  When using the
  shared variable table, variables can be represented as:       T x = { 3, 7
  };      T* p = &x;      T& r = x;    are represented as,      { name: "x",
  var_index: 3 }      { name: "p", value "0x00500500", var_index: 3 }      {
  name: "r", var_index: 3 }    with shared variable table entry #3: {
  members { name: "m1", value: "3" },      members { name: "m2", value: "7" }
  }  Note that the pointer address is stored with the referencing variable and
  not with the referenced variable, to allow the referenced variable to be
  shared between pointer and references.

  Fields:
    members: The members contained or pointed to by the variable.
    name: The name of the variable, if any.
    status: Status associated with the variable. This field will usually stay
      unset. A status of a single variable only applies to that variable or
      expression. The rest of breakpoint data still remains valid. Variables
      might be reported in error state even when breakpoint is not in final
      state.  The message may refer to variable name with "refers_to" set to
      "VARIABLE_NAME". Alternatively "refers_to" will be set to
      "VARIABLE_VALUE". In either case variable value and members will be
      unset.  Example of error message applied to name: "Invalid expression
      syntax".  Example of information message applied to value: "Not
      captured".  Examples of error message applied to value: "Malformed
      string", "Field f not found in class C", "Null pointer dereference".
    value: The simple value of the variable.
    varTableIndex: This is a reference to a variable in the shared variable
      table. More than one variable can reference the same variable in the
      table. The var_index field is an index into variable_table in
      Breakpoint.
  """

  members = _messages.MessageField('Variable', 1, repeated=True)
  name = _messages.StringField(2)
  status = _messages.MessageField('StatusMessage', 3)
  value = _messages.StringField(4)
  varTableIndex = _messages.IntegerField(5, variant=_messages.Variant.INT32)


encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'clouddebugger')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'clouddebugger')
encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'clouddebugger')
