"""Generated message classes for source version v1.

Access source code repositories hosted by Google.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from protorpc import messages as _messages

from googlecloudsdk.third_party.apitools.base.py import encoding


package = 'source'


class Action(_messages.Message):
  """An action to perform on a file in a workspace.

  Fields:
    copyAction: A CopyAction.
    deleteAction: A DeleteAction.
    writeAction: A WriteAction.
  """

  copyAction = _messages.MessageField('CopyAction', 1)
  deleteAction = _messages.MessageField('DeleteAction', 2)
  writeAction = _messages.MessageField('WriteAction', 3)


class Alias(_messages.Message):
  """An alias is a named reference to a revision. Examples include git
  branches and tags, and Mercurial bookmarks.

  Enums:
    KindValueValuesEnum: The alias kind.

  Fields:
    kind: The alias kind.
    name: The alias name.
    revisionId: The revision referred to by this alias. For Mercurial tags and
      bookmarks, and for git tags and branches,  this is the corresponding
      hash.
    workspaceNames: The list of workspace names whose alias is this one. NOT
      YET IMPLEMENTED (b/16943429).
  """

  class KindValueValuesEnum(_messages.Enum):
    """The alias kind.

    Values:
      ANY: ANY is used to indicate to ListAliases to return aliases of all
        kinds, and when used with GetAlias, the GetAlias function will return
        a FIXED, MOVABLE, or MERCURIAL_BRANCH alias, in that priority order.
        Using ANY with CreateAlias or DeleteAlias will result in an error.
      FIXED: Git tag or Mercurial tag
      MOVABLE: Git branch or Mercurial bookmark
      MERCURIAL_BRANCH: Mercurial branch
      OTHER: OTHER is used to fetch non-standard aliases, which are none of
        the kinds above or below. For example, if a git repo has a ref named
        "refs/foo/bar", it is considered to be OTHER.
      SPECIAL_DEPRECATED: DO NOT USE.
    """
    ANY = 0
    FIXED = 1
    MOVABLE = 2
    MERCURIAL_BRANCH = 3
    OTHER = 4
    SPECIAL_DEPRECATED = 5

  kind = _messages.EnumField('KindValueValuesEnum', 1)
  name = _messages.StringField(2)
  revisionId = _messages.StringField(3)
  workspaceNames = _messages.StringField(4, repeated=True)


class ChangedFileInfo(_messages.Message):
  """Represents file information.

  Enums:
    OperationValueValuesEnum: The operation type for the file.

  Fields:
    fromPath: Related file path for copies or renames.  For copies, the type
      will be ADDED and the from_path will point to the source of the copy.
      For renames, the type will be ADDED, the from_path will point to the
      source of the rename, and another ChangedFileInfo record with that path
      will appear with type DELETED. In other words, a rename is represented
      as a copy plus a delete of the old path.
    hash: A hex-encoded hash for the file. Not necessarily a hash of the
      file's contents. Two paths in the same revision with the same hash have
      the same contents with high probability. Empty if the operation is
      CONFLICTED.
    operation: The operation type for the file.
    path: The path of the file.
  """

  class OperationValueValuesEnum(_messages.Enum):
    """The operation type for the file.

    Values:
      OPERATION_UNSPECIFIED: No operation was specified.
      ADDED: The file was added.
      DELETED: The file was deleted.
      MODIFIED: The file was modified.
      CONFLICTED: The result of merging the file is a conflict. The CONFLICTED
        type only appears in Workspace.changed_files or Snapshot.changed_files
        when the workspace is in a merge state.
    """
    OPERATION_UNSPECIFIED = 0
    ADDED = 1
    DELETED = 2
    MODIFIED = 3
    CONFLICTED = 4

  fromPath = _messages.StringField(1)
  hash = _messages.StringField(2)
  operation = _messages.EnumField('OperationValueValuesEnum', 3)
  path = _messages.StringField(4)


class CitcWorkspaceSourceContext(_messages.Message):
  """A CitC workspace as represented by its ID and snapshot.

  Fields:
    branchName: See PiperDepotSourceContext.branch_name for documentation.
    isBaseline: If true, ignore local workspace changes and use the baseline
      of the workspace instead.
    snapshotVersion: The snapshot within the workspace. If zero, refers to the
      moving head of the workspace.  Clients which use zero should be robust
      against remote changes made to a workspace.  If non-zero, refers to an
      immutable CitC snapshot.  The current snapshot_version for USER's CLIENT
      can be found in /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    workspaceId: A unique identifier for a citc workspace. The workspace_id
      for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
  """

  branchName = _messages.StringField(1)
  isBaseline = _messages.BooleanField(2)
  snapshotVersion = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  workspaceId = _messages.StringField(4)


class CloudRepoSourceContext(_messages.Message):
  """A CloudRepoSourceContext denotes a particular revision in a cloud repo (a
  repo hosted by the Google Cloud Platform).

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    repoId: The ID of the repo.
    revisionId: A revision ID.
  """

  aliasName = _messages.StringField(1)
  repoId = _messages.MessageField('RepoId', 2)
  revisionId = _messages.StringField(3)


class CloudWorkspaceId(_messages.Message):
  """A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud
  workspace is a place associated with a repo where modified files can be
  stored before they are committed.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    repoId: The ID of the repo containing the workspace.
  """

  name = _messages.StringField(1)
  repoId = _messages.MessageField('RepoId', 2)


class CloudWorkspaceSourceContext(_messages.Message):
  """A CloudWorkspaceSourceContext denotes a workspace at a particular
  snapshot.

  Fields:
    snapshotId: The ID of the snapshot. An empty snapshot_id refers to the
      most recent snapshot.
    workspaceId: The ID of the workspace.
  """

  snapshotId = _messages.StringField(1)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 2)


class CommitWorkspaceRequest(_messages.Message):
  """Request for CommitWorkspace.

  Fields:
    author: required
    currentSnapshotId: If non-empty, current_snapshot_id must refer to the
      most recent update to the workspace, or ABORTED is returned.
    message: required
    paths: The subset of modified paths to commit. If empty, then commit all
      modified paths.
    workspaceId: The ID of the workspace.
  """

  author = _messages.StringField(1)
  currentSnapshotId = _messages.StringField(2)
  message = _messages.StringField(3)
  paths = _messages.StringField(4, repeated=True)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 5)


class ConnectRepoRequest(_messages.Message):
  """A ConnectRepoRequest object.

  Fields:
    repoId: The ID of the repo to be updated.
    repoSyncConfig: Sets the RepoSync config. Repos are append-only, so once a
      RepoSync config is set, it cannot be unset or modified.
  """

  repoId = _messages.MessageField('RepoId', 1)
  repoSyncConfig = _messages.MessageField('RepoSyncConfig', 2)


class CopyAction(_messages.Message):
  """Copy the contents of the file at from_path in the specified revision or
  snapshot to to_path.  To rename a file, copy it to the new path and delete
  the old.

  Fields:
    fromPath: The path to copy from.
    fromRevisionId: The revision ID from which to copy the file.
    fromSnapshotId: The snapshot ID from which to copy the file.
    toPath: The path to copy to.
  """

  fromPath = _messages.StringField(1)
  fromRevisionId = _messages.StringField(2)
  fromSnapshotId = _messages.StringField(3)
  toPath = _messages.StringField(4)


class CreateWorkspaceRequest(_messages.Message):
  """Request for CreateWorkspace.

  Fields:
    actions: An ordered sequence of actions to perform in the workspace. Can
      be empty. Specifying actions here instead of using ModifyWorkspace saves
      one RPC.
    repoId: The following fields of workspace must be set:  id.name Provide
      the name for the workspace that is unique within the repo. Do not set
      the repo_id field of the workspace ID; instead, set the repo_id field of
      this request.  alias: If alias names an existing movable alias, the
      workspace's baseline is set to the alias's revision.  If a movable alias
      with that name doesn't exist, then the workspace has no baseline. When
      the workspace is committed, a new root revision is created, with no
      parents. The new revision will become the workspace baseline, and the
      alias name will be used to create a movable alias referring to that
      revision.
    workspace: baseline: A revision ID (hexadecimal string) for sequencing: if
      non-empty, the alias must exist, and baseline must match the alias's
      revision ID.  No other fields should be set.
  """

  actions = _messages.MessageField('Action', 1, repeated=True)
  repoId = _messages.MessageField('RepoId', 2)
  workspace = _messages.MessageField('Workspace', 3)


class DeleteAction(_messages.Message):
  """Delete a file or directory. I

  Fields:
    path: The path of the file or directory. If path refers to a directory,
      the directory and its contents are deleted.
  """

  path = _messages.StringField(1)


class DirectoryEntry(_messages.Message):
  """Information about a directory.

  Fields:
    info: Information about the entry.
    isDir: Whether the entry is a file or directory.
    lastModifiedRevisionId: ID of the revision that most recently modified
      this file.
    name: Name of the entry relative to the directory.
  """

  info = _messages.MessageField('FileInfo', 1)
  isDir = _messages.BooleanField(2)
  lastModifiedRevisionId = _messages.StringField(3)
  name = _messages.StringField(4)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class ExternalReference(_messages.Message):
  """A submodule or subrepository."""


class File(_messages.Message):
  """A file, with contents and metadata.  Pagination can be used to limit the
  size of the file. Otherwise, there is a default max size for the contents.
  Whether the file has been truncated can be determined by comparing
  len(contents) to info.Size.

  Fields:
    contents: The contents of the file.
    info: Information about the file.
    path: The path to the file starting from the root of the revision.
  """

  contents = _messages.BytesField(1)
  info = _messages.MessageField('FileInfo', 2)
  path = _messages.StringField(3)


class FileInfo(_messages.Message):
  """File metadata, including a hash of the file contents.

  Enums:
    ModeValueValuesEnum: The mode of the file: an executable, a symbolic link,
      or neither.

  Fields:
    hash: A hex-encoded cryptographic hash of the file's contents, possibly
      with other data.
    isText: An educated guess as to whether the file is human-readable text,
      or binary. Typically available only when file contents are retrieved
      (since the guess depends on examining a prefix of the contents), but
      some systems might store this metadata for every file.
    mode: The mode of the file: an executable, a symbolic link, or neither.
    size: The size of the file in bytes.
  """

  class ModeValueValuesEnum(_messages.Enum):
    """The mode of the file: an executable, a symbolic link, or neither.

    Values:
      FILE_MODE_UNSPECIFIED: No file mode was specified.
      NORMAL: Neither a symbolic link nor executable.
      SYMLINK: A symbolic link.
      EXECUTABLE: An executable.
    """
    FILE_MODE_UNSPECIFIED = 0
    NORMAL = 1
    SYMLINK = 2
    EXECUTABLE = 3

  hash = _messages.StringField(1)
  isText = _messages.BooleanField(2)
  mode = _messages.EnumField('ModeValueValuesEnum', 3)
  size = _messages.IntegerField(4)


class GerritSourceContext(_messages.Message):
  """A SourceContext referring to a Gerrit project.

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    gerritProject: The full project name within the host. Projects may be
      nested, so "project/subproject" is a valid project name. The "repo name"
      is hostURI/project.
    hostUri: The URI of a running Gerrit instance.
    revisionId: A revision (commit) ID.
  """

  aliasName = _messages.StringField(1)
  gerritProject = _messages.StringField(2)
  hostUri = _messages.StringField(3)
  revisionId = _messages.StringField(4)


class GetRevisionsResponse(_messages.Message):
  """Response for GetRevisions.

  Fields:
    revisions: The revisions.
  """

  revisions = _messages.MessageField('Revision', 1, repeated=True)


class GitSourceContext(_messages.Message):
  """A GitSourceContext denotes a particular revision in a third party Git
  repository (e.g. GitHub).

  Fields:
    revisionId: Git commit hash. required.
    url: Git repository URL.
  """

  revisionId = _messages.StringField(1)
  url = _messages.StringField(2)


class ListAliasesResponse(_messages.Message):
  """Response for ListAliases.

  Fields:
    aliases: The list of aliases.
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
    totalAliases: The total number of aliases in the repo of the kind
      specified in the request.
  """

  aliases = _messages.MessageField('Alias', 1, repeated=True)
  nextPageToken = _messages.StringField(2)
  totalAliases = _messages.IntegerField(3, variant=_messages.Variant.INT32)


class ListChangedFilesRequest(_messages.Message):
  """Request for ListChangedFiles.

  Fields:
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    sourceContext1: The first source context to compare.
    sourceContext2: The second source context to compare.
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  sourceContext1 = _messages.MessageField('SourceContext', 3)
  sourceContext2 = _messages.MessageField('SourceContext', 4)


class ListChangedFilesResponse(_messages.Message):
  """Response for ListChangedFiles.

  Fields:
    changedFiles: Note: ChangedFileInfo.from_path is not set here.
      ListChangedFiles does not perform rename/copy detection.  The
      ChangedFileInfo.Type describes the changes from source_context1 to
      source_context2. Thus ADDED would mean a file is not present in
      source_context1 but is present in source_context2.
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
  """

  changedFiles = _messages.MessageField('ChangedFileInfo', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListFilesResponse(_messages.Message):
  """Response for ListFiles.

  Fields:
    files: info.size and contents are not set.
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
  """

  files = _messages.MessageField('File', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListReposResponse(_messages.Message):
  """Response for ListRepos.

  Fields:
    repos: The listed repos.
  """

  repos = _messages.MessageField('Repo', 1, repeated=True)


class ListRevisionsResponse(_messages.Message):
  """Response for ListRevisions.

  Fields:
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
    revisions: The list of revisions.
  """

  nextPageToken = _messages.StringField(1)
  revisions = _messages.MessageField('Revision', 2, repeated=True)


class ListSnapshotsResponse(_messages.Message):
  """Response for ListSnapshots.

  Fields:
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
    snapshots: The list of snapshots.
  """

  nextPageToken = _messages.StringField(1)
  snapshots = _messages.MessageField('Snapshot', 2, repeated=True)


class ListWorkspacesResponse(_messages.Message):
  """Response for ListWorkspaces.

  Fields:
    workspaces: The listed workspaces.
  """

  workspaces = _messages.MessageField('Workspace', 1, repeated=True)


class MergeInfo(_messages.Message):
  """MergeInfo holds information needed while resolving merges, and refreshes
  that involve conflicts.

  Fields:
    commonAncestorRevisionId: Revision ID of the closest common ancestor of
      the file trees that are participating in a refresh or merge.  During a
      refresh, the common ancestor is the baseline of the workspace.  During a
      merge of two branches, the common ancestor is derived from the workspace
      baseline and the alias of the branch being merged in.  The repository
      state at the common ancestor provides the base version for a three-way
      merge.
    isRefresh: If true, a refresh operation is in progress.  If false, a merge
      is in progress.
    otherRevisionId: During a refresh, the ID of the revision with which the
      workspace is being refreshed. This is the revision ID to which the
      workspace's alias refers at the time of the RefreshWorkspace call.
      During a merge, the ID of the revision that's being merged into the
      workspace's alias. This is the revision_id field of the MergeRequest.
    workspaceAfterSnapshotId: The workspace snapshot immediately after the
      refresh or merge RPC completes.  If a file has conflicts, this snapshot
      contains the version of the file with conflict markers.
    workspaceBeforeSnapshotId: During a refresh, the snapshot ID of the latest
      change to the workspace before the refresh.  During a merge, the
      workspace's baseline, which is identical to the commit hash of the
      workspace's alias before initiating the merge.
  """

  commonAncestorRevisionId = _messages.StringField(1)
  isRefresh = _messages.BooleanField(2)
  otherRevisionId = _messages.StringField(3)
  workspaceAfterSnapshotId = _messages.StringField(4)
  workspaceBeforeSnapshotId = _messages.StringField(5)


class MergeRequest(_messages.Message):
  """Request for Merge.

  Fields:
    revisionId: The other revision to be merged.
    workspaceId: The workspace to use for the merge. The revision referred to
      by the workspace's alias will be one of the revisions merged.
  """

  revisionId = _messages.StringField(1)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 2)


class ModifyWorkspaceRequest(_messages.Message):
  """Request for ModifyWorkspace.

  Fields:
    actions: An ordered sequence of actions to perform in the workspace.
    currentSnapshotId: If non-empty, current_snapshot_id must refer to the
      most recent update to the workspace, or ABORTED is returned.
    workspaceId: The ID of the workspace.
  """

  actions = _messages.MessageField('Action', 1, repeated=True)
  currentSnapshotId = _messages.StringField(2)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 3)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If true, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure.
    metadata: Service-specific metadata associated with the operation.  It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping
      above, the `name` should have the format of
      `operations/some/unique/name`.
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Service-specific metadata associated with the operation.  It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata.  Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class PiperDepotSourceContext(_messages.Message):
  """Source code in the Piper depot as of a certain change.

  Fields:
    branchName: Specifies that the source context refers to a branch, rather
      than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    changeNumber: CL number. If zero, represents depot head.
    disableComponents: If false, use the released components as of the CL. If
      true, use true head.
    versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
  """

  branchName = _messages.StringField(1)
  changeNumber = _messages.IntegerField(2)
  disableComponents = _messages.BooleanField(3)
  versionMap = _messages.BytesField(4)


class ProjectRepoId(_messages.Message):
  """Selects a repo using a Google Cloud Platform project ID (e.g. winged-
  cargo-31) and a repo name within that project.
  """



class ReadResponse(_messages.Message):
  """Response to read request. Exactly one of entries, file or
  external_reference will be populated, depending on what the path in the
  request denotes.

  Fields:
    entries: Contains the directory entries if the request specifies a
      directory.
    externalReference: The read path denotes a Git submodule or Mercurial
      subrepository.
    file: Contains file metadata and contents if the request specifies a file.
    nextPageToken: Use as the value of page_token in the next call to obtain
      the next page of results. If empty, there are no more results.
    sourceContext: Returns the SourceContext actually used, resolving any
      alias in the input SourceContext into its revision ID and returning the
      actual current snapshot ID if the read was from a workspace with an
      unspecified snapshot ID.
  """

  entries = _messages.MessageField('DirectoryEntry', 1, repeated=True)
  externalReference = _messages.MessageField('ExternalReference', 2)
  file = _messages.MessageField('File', 3)
  nextPageToken = _messages.StringField(4)
  sourceContext = _messages.MessageField('SourceContext', 5)


class RefreshWorkspaceRequest(_messages.Message):
  """Request for RefreshWorkspace.

  Fields:
    workspaceId: The ID of the workspace.
  """

  workspaceId = _messages.MessageField('CloudWorkspaceId', 1)


class Repo(_messages.Message):
  """A repository (or repo) stores files for a version-control system.

  Enums:
    StateValueValuesEnum: The state the repo is in.
    VcsValueValuesEnum: The version control system of the repo.

  Fields:
    createTime: Timestamp when the repo was created.
    id: Randomly generated ID that uniquely identifies a repo.
    lastUpdateTime: Timestamp of last update to the repo. This can be either a
      metadata change (i.e., a change to this proto) or a commit to the code
      repository .
    name: Human-readable, user-defined name of the repository. Names must be
      alphanumeric, lowercase, begin with a letter, and be between 3 and 63
      characters long. The - character can appear in the middle positions.
      (Names must satisfy the regular expression a-z{1,61}[a-z0-9].)
    projectId: Immutable, globally unique, DNS-compatible textual identifier.
      Examples: user-chosen-project-id, yellow-banana-33.
    projectNumber: Immutable, globally unique, numerical ID of the project.
    releasePipelinesApiHostname: The hostname of the release-pipelines Swarm
      API. This should only be set if the RELEASE_PIPELINES tool is enabled.
      This allows individual repositories to be tied to different instances of
      the release pipelines backend, which in turn makes testing different
      versions of that backend easier.
    repoSyncConfig: How RepoSync is configured for this repo. If missing, this
      repo is not set up for RepoSync.
    state: The state the repo is in.
    vcs: The version control system of the repo.
  """

  class StateValueValuesEnum(_messages.Enum):
    """The state the repo is in.

    Values:
      STATE_UNSPECIFIED: No state was specified.
      LIVE: The repo is live and available for use.
      DELETED: The repo has been deleted.
    """
    STATE_UNSPECIFIED = 0
    LIVE = 1
    DELETED = 2

  class VcsValueValuesEnum(_messages.Enum):
    """The version control system of the repo.

    Values:
      VCS_UNSPECIFIED: No version control system was specified.
      GIT: The Git version control system.
      MERCURIAL: The Mercurial version control system.
    """
    VCS_UNSPECIFIED = 0
    GIT = 1
    MERCURIAL = 2

  createTime = _messages.StringField(1)
  id = _messages.StringField(2)
  lastUpdateTime = _messages.StringField(3)
  name = _messages.StringField(4)
  projectId = _messages.StringField(5)
  projectNumber = _messages.IntegerField(6)
  releasePipelinesApiHostname = _messages.StringField(7)
  repoSyncConfig = _messages.MessageField('RepoSyncConfig', 8)
  state = _messages.EnumField('StateValueValuesEnum', 9)
  vcs = _messages.EnumField('VcsValueValuesEnum', 10)


class RepoId(_messages.Message):
  """A unique identifier for a cloud repo.

  Fields:
    projectRepoId: A combination of a project ID and a repo name.
    uid: A server-assigned, globally unique identifier.
  """

  projectRepoId = _messages.MessageField('ProjectRepoId', 1)
  uid = _messages.StringField(2)


class RepoSyncConfig(_messages.Message):
  """RepoSync configuration information.

  Enums:
    StatusValueValuesEnum: The status of RepoSync.

  Fields:
    deployKeyId: ID of the deploy key that is used to authorize pull requests.
      This lets us deauthorize the key with the remote service (GitHub or
      Bitbucket) when the repo is disconnected or deleted. This also lets us
      rotate the key.
    externalRepoEncryptedCredentials: If the repo has RepoSync enabled, this
      will be the encrypted username and password necessary to pull from the
      repo. If this is not provided or empty, the external repo must be
      publicly readable.
    externalRepoEncryptedSshKey: If the repo has RepoSync enabled and URL has
      an SSH scheme (ssh://, git+ssh://) this is the encrypted private SSH key
      to use for SSH authentication.
    externalRepoUrl: If this repo is enabled for RepoSync, this will be the
      URL of the external repo that this repo should sync with.
    status: The status of RepoSync.
    webhookId: ID of the webhook that triggers syncs for this repo, if this
      repo is triggered by a single-repo trigger. This lets us delete the
      webhook when the repo is disconnected or deleted. See http://go
      /reposync-webhooks
  """

  class StatusValueValuesEnum(_messages.Enum):
    """The status of RepoSync.

    Values:
      REPO_SYNC_STATUS_UNSPECIFIED: No RepoSync status was specified.
      OK: RepoSync is working.
      FAILED_AUTH: RepoSync failed because of authorization/authentication.
      FAILED_OTHER: RepoSync failed for a reason other than auth.
      FAILED_NOT_FOUND: RepoSync failed because the repository was not found.
    """
    REPO_SYNC_STATUS_UNSPECIFIED = 0
    OK = 1
    FAILED_AUTH = 2
    FAILED_OTHER = 3
    FAILED_NOT_FOUND = 4

  deployKeyId = _messages.StringField(1)
  externalRepoEncryptedCredentials = _messages.StringField(2)
  externalRepoEncryptedSshKey = _messages.BytesField(3)
  externalRepoUrl = _messages.StringField(4)
  status = _messages.EnumField('StatusValueValuesEnum', 5)
  webhookId = _messages.StringField(6)


class ResolveFilesRequest(_messages.Message):
  """Request for ResolveFiles.

  Fields:
    resolvedPaths: Files that should be marked as resolved in the workspace.
      All files in resolved_paths must currently be in the CONFLICTED state in
      Workspace.changed_files.  NOTE: Changing a file's contents to match the
      contents in the workspace baseline, then calling ResolveFiles on it,
      will cause the file to be removed from the changed_files list entirely.
      If resolved_paths is empty, INVALID_ARGUMENT is returned. If
      resolved_paths contains duplicates, INVALID_ARGUMENT is returned. If
      resolved_paths contains a path that was never unresolved, or has already
      been resolved, FAILED_PRECONDITION is returned.
    workspaceId: The ID of the workspace.
  """

  resolvedPaths = _messages.StringField(1, repeated=True)
  workspaceId = _messages.MessageField('CloudWorkspaceId', 2)


class RevertRefreshRequest(_messages.Message):
  """Request for RevertRefresh.

  Fields:
    workspaceId: The ID of the workspace.
  """

  workspaceId = _messages.MessageField('CloudWorkspaceId', 1)


class Revision(_messages.Message):
  """A revision is a snapshot of a file tree, with associated metadata. This
  message contains metadata only. Use the Read or ReadFromWorkspaceOrAlias
  rpcs to read the contents of the revision's file tree.

  Fields:
    author: The name of the user who wrote the revision. (In Git, this can
      differ from committer.)
    branchName: If this represents a Mercurial revision, the named branch
      associated with the revision if any.
    changedFiles: Files changed in this revision.
    changedFilesUnknown: In some cases changed-file information is generated
      asynchronously. So there is a period of time when it is not available.
      This field encodes that fact. (An empty changed_files field is not
      sufficient, since it is possible for a revision to have no changed
      files.)
    commitMessage: The message added by the committer.
    commitTime: When the revision was committed.
    committer: The name of the user who committed the revision.
    createTime: When the revision was made. This may or may not be reliable,
      depending on the version control system being used.
    id: The unique ID of the revision. For many version control systems, this
      will be string of hex digits representing a hash value.
    parentIds: The revision IDs of this revision's parents.
  """

  author = _messages.StringField(1)
  branchName = _messages.StringField(2)
  changedFiles = _messages.MessageField('ChangedFileInfo', 3, repeated=True)
  changedFilesUnknown = _messages.BooleanField(4)
  commitMessage = _messages.StringField(5)
  commitTime = _messages.StringField(6)
  committer = _messages.StringField(7)
  createTime = _messages.StringField(8)
  id = _messages.StringField(9)
  parentIds = _messages.StringField(10, repeated=True)


class Snapshot(_messages.Message):
  """A snapshot is a version of a workspace. Each change to a workspace's
  files creates a new snapshot. A workspace consists of a sequence of
  snapshots.

  Fields:
    changedFiles: The set of files modified in this snapshot, relative to the
      workspace baseline. ChangedFileInfo.from_path is not set.
    createTime: Timestamp when the snapshot was created.
    snapshotId: The ID of the snapshot.
  """

  changedFiles = _messages.MessageField('ChangedFileInfo', 1, repeated=True)
  createTime = _messages.StringField(2)
  snapshotId = _messages.StringField(3)


class SourceContext(_messages.Message):
  """A SourceContext is a reference to a tree of files. A SourceContext
  together with a path point to a unique revision of a single file or
  directory.

  Fields:
    citc: A SourceContext referring to a Citc client.
    cloudRepo: A SourceContext referring to a revision in a cloud repo.
    cloudWorkspace: A SourceContext referring to a snapshot in a cloud
      workspace.
    gerrit: A SourceContext referring to a Gerrit project.
    git: A SourceContext referring to any third party Git repo (e.g. GitHub).
    piper: A SourceContext referring to a CL in Piper.
  """

  citc = _messages.MessageField('CitcWorkspaceSourceContext', 1)
  cloudRepo = _messages.MessageField('CloudRepoSourceContext', 2)
  cloudWorkspace = _messages.MessageField('CloudWorkspaceSourceContext', 3)
  gerrit = _messages.MessageField('GerritSourceContext', 4)
  git = _messages.MessageField('GitSourceContext', 5)
  piper = _messages.MessageField('PiperDepotSourceContext', 6)


class SourceProjectsCloneRepoRequest(_messages.Message):
  """A SourceProjectsCloneRepoRequest object.

  Enums:
    ExternalVcsValueValuesEnum: The version control system of the repo, if
      known. If left unspecified, it will be determined heuristically. At
      present, only git is supported.

  Fields:
    external_credentials: Credentials required to access the repo on remote
      hosting system. The nature of the credentials depends on the system
      begin accessed and the protocol being used. Not required for public
      repos.
    external_url: The URL of the repo.
    external_vcs: The version control system of the repo, if known. If left
      unspecified, it will be determined heuristically. At present, only git
      is supported.
    projectId: The project ID of the repo to create. Must be non-empty for an
      external repo. If empty for a Cloud Source Repo, the project of the repo
      to be copied is used.
    repoId_projectRepoId_projectId: The ID of the project.
    repoId_projectRepoId_repoName: The name of the repo. Leave empty for the
      default repo.
    repoId_uid: A server-assigned, globally unique identifier.
    repoName: The name of the repo to create.
  """

  class ExternalVcsValueValuesEnum(_messages.Enum):
    """The version control system of the repo, if known. If left unspecified,
    it will be determined heuristically. At present, only git is supported.

    Values:
      VCS_UNSPECIFIED: <no description>
      GIT: <no description>
      MERCURIAL: <no description>
    """
    VCS_UNSPECIFIED = 0
    GIT = 1
    MERCURIAL = 2

  external_credentials = _messages.BytesField(1)
  external_url = _messages.StringField(2)
  external_vcs = _messages.EnumField('ExternalVcsValueValuesEnum', 3)
  projectId = _messages.StringField(4, required=True)
  repoId_projectRepoId_projectId = _messages.StringField(5)
  repoId_projectRepoId_repoName = _messages.StringField(6)
  repoId_uid = _messages.StringField(7)
  repoName = _messages.StringField(8)


class SourceProjectsCopyExternalRepoRequest(_messages.Message):
  """A SourceProjectsCopyExternalRepoRequest object.

  Fields:
    projectId: The project ID of the repo to create.
    repoName: The name of the repo to create.
    url: The URL of the repo to copy.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2)
  url = _messages.StringField(3)


class SourceProjectsReposAliasesCreateRequest(_messages.Message):
  """A SourceProjectsReposAliasesCreateRequest object.

  Fields:
    alias: A Alias resource to be passed as the request body.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  alias = _messages.MessageField('Alias', 1)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)
  uid = _messages.StringField(4)


class SourceProjectsReposAliasesDeleteRequest(_messages.Message):
  """A SourceProjectsReposAliasesDeleteRequest object.

  Enums:
    KindValueValuesEnum: The kind of the alias to delete.

  Fields:
    kind: The kind of the alias to delete.
    name: The name of the alias to delete.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionId: If non-empty, must match the revision that the alias refers
      to.
    uid: A server-assigned, globally unique identifier.
  """

  class KindValueValuesEnum(_messages.Enum):
    """The kind of the alias to delete.

    Values:
      ANY: <no description>
      FIXED: <no description>
      MOVABLE: <no description>
      MERCURIAL_BRANCH: <no description>
      OTHER: <no description>
      SPECIAL_DEPRECATED: <no description>
    """
    ANY = 0
    FIXED = 1
    MOVABLE = 2
    MERCURIAL_BRANCH = 3
    OTHER = 4
    SPECIAL_DEPRECATED = 5

  kind = _messages.EnumField('KindValueValuesEnum', 1, required=True)
  name = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  repoName = _messages.StringField(4, required=True)
  revisionId = _messages.StringField(5)
  uid = _messages.StringField(6)


class SourceProjectsReposAliasesFilesGetRequest(_messages.Message):
  """A SourceProjectsReposAliasesFilesGetRequest object.

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    citc_branchName: See PiperDepotSourceContext.branch_name for
      documentation.
    citc_isBaseline: If true, ignore local workspace changes and use the
      baseline of the workspace instead.
    citc_snapshotVersion: The snapshot within the workspace. If zero, refers
      to the moving head of the workspace.  Clients which use zero should be
      robust against remote changes made to a workspace.  If non-zero, refers
      to an immutable CitC snapshot.  The current snapshot_version for USER's
      CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    citc_workspaceId: A unique identifier for a citc workspace. The
      workspace_id for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
    cloudWorkspace_snapshotId: The ID of the snapshot. An empty snapshot_id
      refers to the most recent snapshot.
    cloudWorkspace_workspaceId_name: The unique name of the workspace within
      the repo.  This is the name chosen by the client in the Source API's
      CreateWorkspace method.
    cloudWorkspace_workspaceId_repoId_projectRepoId_projectId: The ID of the
      project.
    cloudWorkspace_workspaceId_repoId_projectRepoId_repoName: The name of the
      repo. Leave empty for the default repo.
    cloudWorkspace_workspaceId_repoId_uid: A server-assigned, globally unique
      identifier.
    gerrit_aliasName: The name of an alias (branch, tag, etc.).
    gerrit_gerritProject: The full project name within the host. Projects may
      be nested, so "project/subproject" is a valid project name. The "repo
      name" is hostURI/project.
    gerrit_hostUri: The URI of a running Gerrit instance.
    gerrit_revisionId: A revision (commit) ID.
    git_revisionId: Git commit hash. required.
    git_url: Git repository URL.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page, or if using start_index.
    path: Path to the file or directory from the root directory of the source
      context. It must not have leading or trailing slashes.
    piper_branchName: Specifies that the source context refers to a branch,
      rather than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    piper_changeNumber: CL number. If zero, represents depot head.
    piper_disableComponents: If false, use the released components as of the
      CL. If true, use true head.
    piper_versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionId: A revision ID.
    startPosition: If path refers to a file, the position of the first byte of
      its contents to return. If path refers to a directory, the position of
      the first entry in the listing. If page_token is specified, this field
      is ignored.
    uid: A server-assigned, globally unique identifier.
  """

  aliasName = _messages.StringField(1, required=True)
  citc_branchName = _messages.StringField(2)
  citc_isBaseline = _messages.BooleanField(3)
  citc_snapshotVersion = _messages.IntegerField(4, variant=_messages.Variant.UINT64)
  citc_workspaceId = _messages.StringField(5)
  cloudWorkspace_snapshotId = _messages.StringField(6)
  cloudWorkspace_workspaceId_name = _messages.StringField(7)
  cloudWorkspace_workspaceId_repoId_projectRepoId_projectId = _messages.StringField(8)
  cloudWorkspace_workspaceId_repoId_projectRepoId_repoName = _messages.StringField(9)
  cloudWorkspace_workspaceId_repoId_uid = _messages.StringField(10)
  gerrit_aliasName = _messages.StringField(11)
  gerrit_gerritProject = _messages.StringField(12)
  gerrit_hostUri = _messages.StringField(13)
  gerrit_revisionId = _messages.StringField(14)
  git_revisionId = _messages.StringField(15)
  git_url = _messages.StringField(16)
  pageSize = _messages.IntegerField(17)
  pageToken = _messages.StringField(18)
  path = _messages.StringField(19, required=True)
  piper_branchName = _messages.StringField(20)
  piper_changeNumber = _messages.IntegerField(21)
  piper_disableComponents = _messages.BooleanField(22)
  piper_versionMap = _messages.BytesField(23)
  projectId = _messages.StringField(24, required=True)
  repoName = _messages.StringField(25, required=True)
  revisionId = _messages.StringField(26)
  startPosition = _messages.IntegerField(27)
  uid = _messages.StringField(28)


class SourceProjectsReposAliasesGetRequest(_messages.Message):
  """A SourceProjectsReposAliasesGetRequest object.

  Enums:
    KindValueValuesEnum: The kind of the alias.

  Fields:
    kind: The kind of the alias.
    name: The alias name.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  class KindValueValuesEnum(_messages.Enum):
    """The kind of the alias.

    Values:
      ANY: <no description>
      FIXED: <no description>
      MOVABLE: <no description>
      MERCURIAL_BRANCH: <no description>
      OTHER: <no description>
      SPECIAL_DEPRECATED: <no description>
    """
    ANY = 0
    FIXED = 1
    MOVABLE = 2
    MERCURIAL_BRANCH = 3
    OTHER = 4
    SPECIAL_DEPRECATED = 5

  kind = _messages.EnumField('KindValueValuesEnum', 1, required=True)
  name = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  repoName = _messages.StringField(4, required=True)
  uid = _messages.StringField(5)


class SourceProjectsReposAliasesListRequest(_messages.Message):
  """A SourceProjectsReposAliasesListRequest object.

  Enums:
    KindValueValuesEnum: Return only aliases of this kind.

  Fields:
    kind: Return only aliases of this kind.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  class KindValueValuesEnum(_messages.Enum):
    """Return only aliases of this kind.

    Values:
      ANY: <no description>
      FIXED: <no description>
      MOVABLE: <no description>
      MERCURIAL_BRANCH: <no description>
      OTHER: <no description>
      SPECIAL_DEPRECATED: <no description>
    """
    ANY = 0
    FIXED = 1
    MOVABLE = 2
    MERCURIAL_BRANCH = 3
    OTHER = 4
    SPECIAL_DEPRECATED = 5

  kind = _messages.EnumField('KindValueValuesEnum', 1)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectId = _messages.StringField(4, required=True)
  repoName = _messages.StringField(5, required=True)
  uid = _messages.StringField(6)


class SourceProjectsReposAliasesUpdateRequest(_messages.Message):
  """A SourceProjectsReposAliasesUpdateRequest object.

  Fields:
    alias: A Alias resource to be passed as the request body.
    aliasesId: A string attribute.
    oldRevisionId: If non-empty, must match the revision that the alias refers
      to.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  alias = _messages.MessageField('Alias', 1)
  aliasesId = _messages.StringField(2, required=True)
  oldRevisionId = _messages.StringField(3)
  projectId = _messages.StringField(4, required=True)
  repoName = _messages.StringField(5, required=True)
  uid = _messages.StringField(6)


class SourceProjectsReposConnectRequest(_messages.Message):
  """A SourceProjectsReposConnectRequest object.

  Fields:
    connectRepoRequest: A ConnectRepoRequest resource to be passed as the
      request body.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  connectRepoRequest = _messages.MessageField('ConnectRepoRequest', 1)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)


class SourceProjectsReposDeleteRequest(_messages.Message):
  """A SourceProjectsReposDeleteRequest object.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  uid = _messages.StringField(3)


class SourceProjectsReposFilesReadFromWorkspaceOrAliasRequest(_messages.Message):
  """A SourceProjectsReposFilesReadFromWorkspaceOrAliasRequest object.

  Fields:
    alias: Alias to read from (if the workspace doesn't exist).
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    path: Path to the file or directory from the root directory of the source
      context. It must not have leading or trailing slashes.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    startPosition: If path refers to a file, the position of the first byte of
      its contents to return. If path refers to a directory, the position of
      the first entry in the listing. If page_token is specified, this field
      is ignored.
    uid: A server-assigned, globally unique identifier.
    workspaceName: Workspace to read from (if it exists).
  """

  alias = _messages.StringField(1)
  pageSize = _messages.IntegerField(2)
  pageToken = _messages.StringField(3)
  path = _messages.StringField(4, required=True)
  projectId = _messages.StringField(5, required=True)
  repoName = _messages.StringField(6, required=True)
  startPosition = _messages.IntegerField(7)
  uid = _messages.StringField(8)
  workspaceName = _messages.StringField(9)


class SourceProjectsReposGetRequest(_messages.Message):
  """A SourceProjectsReposGetRequest object.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  uid = _messages.StringField(3)


class SourceProjectsReposListRequest(_messages.Message):
  """A SourceProjectsReposListRequest object.

  Fields:
    projectId: The project ID whose repos should be listed.
  """

  projectId = _messages.StringField(1, required=True)


class SourceProjectsReposMergeRequest(_messages.Message):
  """A SourceProjectsReposMergeRequest object.

  Fields:
    mergeRequest: A MergeRequest resource to be passed as the request body.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  mergeRequest = _messages.MessageField('MergeRequest', 1)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)


class SourceProjectsReposRevisionsFilesGetRequest(_messages.Message):
  """A SourceProjectsReposRevisionsFilesGetRequest object.

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    citc_branchName: See PiperDepotSourceContext.branch_name for
      documentation.
    citc_isBaseline: If true, ignore local workspace changes and use the
      baseline of the workspace instead.
    citc_snapshotVersion: The snapshot within the workspace. If zero, refers
      to the moving head of the workspace.  Clients which use zero should be
      robust against remote changes made to a workspace.  If non-zero, refers
      to an immutable CitC snapshot.  The current snapshot_version for USER's
      CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    citc_workspaceId: A unique identifier for a citc workspace. The
      workspace_id for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
    cloudWorkspace_snapshotId: The ID of the snapshot. An empty snapshot_id
      refers to the most recent snapshot.
    cloudWorkspace_workspaceId_name: The unique name of the workspace within
      the repo.  This is the name chosen by the client in the Source API's
      CreateWorkspace method.
    cloudWorkspace_workspaceId_repoId_projectRepoId_projectId: The ID of the
      project.
    cloudWorkspace_workspaceId_repoId_projectRepoId_repoName: The name of the
      repo. Leave empty for the default repo.
    cloudWorkspace_workspaceId_repoId_uid: A server-assigned, globally unique
      identifier.
    gerrit_aliasName: The name of an alias (branch, tag, etc.).
    gerrit_gerritProject: The full project name within the host. Projects may
      be nested, so "project/subproject" is a valid project name. The "repo
      name" is hostURI/project.
    gerrit_hostUri: The URI of a running Gerrit instance.
    gerrit_revisionId: A revision (commit) ID.
    git_revisionId: Git commit hash. required.
    git_url: Git repository URL.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page, or if using start_index.
    path: Path to the file or directory from the root directory of the source
      context. It must not have leading or trailing slashes.
    piper_branchName: Specifies that the source context refers to a branch,
      rather than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    piper_changeNumber: CL number. If zero, represents depot head.
    piper_disableComponents: If false, use the released components as of the
      CL. If true, use true head.
    piper_versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionId: A revision ID.
    startPosition: If path refers to a file, the position of the first byte of
      its contents to return. If path refers to a directory, the position of
      the first entry in the listing. If page_token is specified, this field
      is ignored.
    uid: A server-assigned, globally unique identifier.
  """

  aliasName = _messages.StringField(1)
  citc_branchName = _messages.StringField(2)
  citc_isBaseline = _messages.BooleanField(3)
  citc_snapshotVersion = _messages.IntegerField(4, variant=_messages.Variant.UINT64)
  citc_workspaceId = _messages.StringField(5)
  cloudWorkspace_snapshotId = _messages.StringField(6)
  cloudWorkspace_workspaceId_name = _messages.StringField(7)
  cloudWorkspace_workspaceId_repoId_projectRepoId_projectId = _messages.StringField(8)
  cloudWorkspace_workspaceId_repoId_projectRepoId_repoName = _messages.StringField(9)
  cloudWorkspace_workspaceId_repoId_uid = _messages.StringField(10)
  gerrit_aliasName = _messages.StringField(11)
  gerrit_gerritProject = _messages.StringField(12)
  gerrit_hostUri = _messages.StringField(13)
  gerrit_revisionId = _messages.StringField(14)
  git_revisionId = _messages.StringField(15)
  git_url = _messages.StringField(16)
  pageSize = _messages.IntegerField(17)
  pageToken = _messages.StringField(18)
  path = _messages.StringField(19, required=True)
  piper_branchName = _messages.StringField(20)
  piper_changeNumber = _messages.IntegerField(21)
  piper_disableComponents = _messages.BooleanField(22)
  piper_versionMap = _messages.BytesField(23)
  projectId = _messages.StringField(24, required=True)
  repoName = _messages.StringField(25, required=True)
  revisionId = _messages.StringField(26, required=True)
  startPosition = _messages.IntegerField(27)
  uid = _messages.StringField(28)


class SourceProjectsReposRevisionsGetBatchGetRequest(_messages.Message):
  """A SourceProjectsReposRevisionsGetBatchGetRequest object.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionIds: The revision IDs to retrieve.
    uid: A server-assigned, globally unique identifier.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  revisionIds = _messages.StringField(3, repeated=True)
  uid = _messages.StringField(4)


class SourceProjectsReposRevisionsGetRequest(_messages.Message):
  """A SourceProjectsReposRevisionsGetRequest object.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionId: The ID of the revision.
    uid: A server-assigned, globally unique identifier.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  revisionId = _messages.StringField(3, required=True)
  uid = _messages.StringField(4)


class SourceProjectsReposRevisionsListFilesRequest(_messages.Message):
  """A SourceProjectsReposRevisionsListFilesRequest object.

  Fields:
    aliasName: The name of an alias (branch, tag, etc.).
    citc_branchName: See PiperDepotSourceContext.branch_name for
      documentation.
    citc_isBaseline: If true, ignore local workspace changes and use the
      baseline of the workspace instead.
    citc_snapshotVersion: The snapshot within the workspace. If zero, refers
      to the moving head of the workspace.  Clients which use zero should be
      robust against remote changes made to a workspace.  If non-zero, refers
      to an immutable CitC snapshot.  The current snapshot_version for USER's
      CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    citc_workspaceId: A unique identifier for a citc workspace. The
      workspace_id for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
    cloudWorkspace_snapshotId: The ID of the snapshot. An empty snapshot_id
      refers to the most recent snapshot.
    cloudWorkspace_workspaceId_name: The unique name of the workspace within
      the repo.  This is the name chosen by the client in the Source API's
      CreateWorkspace method.
    cloudWorkspace_workspaceId_repoId_projectRepoId_projectId: The ID of the
      project.
    cloudWorkspace_workspaceId_repoId_projectRepoId_repoName: The name of the
      repo. Leave empty for the default repo.
    cloudWorkspace_workspaceId_repoId_uid: A server-assigned, globally unique
      identifier.
    gerrit_aliasName: The name of an alias (branch, tag, etc.).
    gerrit_gerritProject: The full project name within the host. Projects may
      be nested, so "project/subproject" is a valid project name. The "repo
      name" is hostURI/project.
    gerrit_hostUri: The URI of a running Gerrit instance.
    gerrit_revisionId: A revision (commit) ID.
    git_revisionId: Git commit hash. required.
    git_url: Git repository URL.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    piper_branchName: Specifies that the source context refers to a branch,
      rather than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    piper_changeNumber: CL number. If zero, represents depot head.
    piper_disableComponents: If false, use the released components as of the
      CL. If true, use true head.
    piper_versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revisionId: A revision ID.
    uid: A server-assigned, globally unique identifier.
  """

  aliasName = _messages.StringField(1)
  citc_branchName = _messages.StringField(2)
  citc_isBaseline = _messages.BooleanField(3)
  citc_snapshotVersion = _messages.IntegerField(4, variant=_messages.Variant.UINT64)
  citc_workspaceId = _messages.StringField(5)
  cloudWorkspace_snapshotId = _messages.StringField(6)
  cloudWorkspace_workspaceId_name = _messages.StringField(7)
  cloudWorkspace_workspaceId_repoId_projectRepoId_projectId = _messages.StringField(8)
  cloudWorkspace_workspaceId_repoId_projectRepoId_repoName = _messages.StringField(9)
  cloudWorkspace_workspaceId_repoId_uid = _messages.StringField(10)
  gerrit_aliasName = _messages.StringField(11)
  gerrit_gerritProject = _messages.StringField(12)
  gerrit_hostUri = _messages.StringField(13)
  gerrit_revisionId = _messages.StringField(14)
  git_revisionId = _messages.StringField(15)
  git_url = _messages.StringField(16)
  pageSize = _messages.IntegerField(17, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(18)
  piper_branchName = _messages.StringField(19)
  piper_changeNumber = _messages.IntegerField(20)
  piper_disableComponents = _messages.BooleanField(21)
  piper_versionMap = _messages.BytesField(22)
  projectId = _messages.StringField(23, required=True)
  repoName = _messages.StringField(24, required=True)
  revisionId = _messages.StringField(25, required=True)
  uid = _messages.StringField(26)


class SourceProjectsReposRevisionsListRequest(_messages.Message):
  """A SourceProjectsReposRevisionsListRequest object.

  Enums:
    WalkDirectionValueValuesEnum: The direction to walk the graph.

  Fields:
    ends: Revision IDs (hexadecimal strings) that specify where the listing
      ends. If this field is present, the listing will contain only revisions
      that are topologically between starts and ends, inclusive.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    path: List only those revisions that modify path.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    starts: Revision IDs (hexadecimal strings) that specify where the listing
      begins. If empty, the repo heads (revisions with no children) are used.
    uid: A server-assigned, globally unique identifier.
    walkDirection: The direction to walk the graph.
  """

  class WalkDirectionValueValuesEnum(_messages.Enum):
    """The direction to walk the graph.

    Values:
      BACKWARD: <no description>
      FORWARD: <no description>
    """
    BACKWARD = 0
    FORWARD = 1

  ends = _messages.StringField(1, repeated=True)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  path = _messages.StringField(4)
  projectId = _messages.StringField(5, required=True)
  repoName = _messages.StringField(6, required=True)
  starts = _messages.StringField(7, repeated=True)
  uid = _messages.StringField(8)
  walkDirection = _messages.EnumField('WalkDirectionValueValuesEnum', 9)


class SourceProjectsReposUpdateRequest(_messages.Message):

  class RepoSyncConfigStatusValueValuesEnum(_messages.Enum):
    """The status of RepoSync.

    Values:
      REPO_SYNC_STATUS_UNSPECIFIED: <no description>
      OK: <no description>
      FAILED_AUTH: <no description>
      FAILED_OTHER: <no description>
      FAILED_NOT_FOUND: <no description>
    """
    REPO_SYNC_STATUS_UNSPECIFIED = 0
    OK = 1
    FAILED_AUTH = 2
    FAILED_OTHER = 3
    FAILED_NOT_FOUND = 4

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  repoSyncConfig_deployKeyId = _messages.StringField(3)
  repoSyncConfig_externalRepoEncryptedCredentials = _messages.StringField(4)
  repoSyncConfig_externalRepoEncryptedSshKey = _messages.BytesField(5)
  repoSyncConfig_externalRepoUrl = _messages.StringField(6)
  repoSyncConfig_status = _messages.EnumField('RepoSyncConfigStatusValueValuesEnum', 7)
  repoSyncConfig_webhookId = _messages.StringField(8)
  uid = _messages.StringField(9)


class SourceProjectsReposWorkspacesCommitWorkspaceRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesCommitWorkspaceRequest object.

  Fields:
    commitWorkspaceRequest: A CommitWorkspaceRequest resource to be passed as
      the request body.
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  commitWorkspaceRequest = _messages.MessageField('CommitWorkspaceRequest', 1)
  name = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  repoName = _messages.StringField(4, required=True)


class SourceProjectsReposWorkspacesCreateRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesCreateRequest object.

  Fields:
    createWorkspaceRequest: A CreateWorkspaceRequest resource to be passed as
      the request body.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  createWorkspaceRequest = _messages.MessageField('CreateWorkspaceRequest', 1)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)


class SourceProjectsReposWorkspacesDeleteRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesDeleteRequest object.

  Fields:
    currentSnapshotId: If non-empty, current_snapshot_id must refer to the
      most recent update to the workspace, or ABORTED is returned.
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  currentSnapshotId = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  repoName = _messages.StringField(4, required=True)
  uid = _messages.StringField(5)


class SourceProjectsReposWorkspacesFilesGetRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesFilesGetRequest object.

  Fields:
    citc_branchName: See PiperDepotSourceContext.branch_name for
      documentation.
    citc_isBaseline: If true, ignore local workspace changes and use the
      baseline of the workspace instead.
    citc_snapshotVersion: The snapshot within the workspace. If zero, refers
      to the moving head of the workspace.  Clients which use zero should be
      robust against remote changes made to a workspace.  If non-zero, refers
      to an immutable CitC snapshot.  The current snapshot_version for USER's
      CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    citc_workspaceId: A unique identifier for a citc workspace. The
      workspace_id for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
    cloudRepo_aliasName: The name of an alias (branch, tag, etc.).
    cloudRepo_repoId_projectRepoId_projectId: The ID of the project.
    cloudRepo_repoId_projectRepoId_repoName: The name of the repo. Leave empty
      for the default repo.
    cloudRepo_repoId_uid: A server-assigned, globally unique identifier.
    cloudRepo_revisionId: A revision ID.
    gerrit_aliasName: The name of an alias (branch, tag, etc.).
    gerrit_gerritProject: The full project name within the host. Projects may
      be nested, so "project/subproject" is a valid project name. The "repo
      name" is hostURI/project.
    gerrit_hostUri: The URI of a running Gerrit instance.
    gerrit_revisionId: A revision (commit) ID.
    git_revisionId: Git commit hash. required.
    git_url: Git repository URL.
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page, or if using start_index.
    path: Path to the file or directory from the root directory of the source
      context. It must not have leading or trailing slashes.
    piper_branchName: Specifies that the source context refers to a branch,
      rather than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    piper_changeNumber: CL number. If zero, represents depot head.
    piper_disableComponents: If false, use the released components as of the
      CL. If true, use true head.
    piper_versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    snapshotId: The ID of the snapshot. An empty snapshot_id refers to the
      most recent snapshot.
    startPosition: If path refers to a file, the position of the first byte of
      its contents to return. If path refers to a directory, the position of
      the first entry in the listing. If page_token is specified, this field
      is ignored.
    uid: A server-assigned, globally unique identifier.
  """

  citc_branchName = _messages.StringField(1)
  citc_isBaseline = _messages.BooleanField(2)
  citc_snapshotVersion = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  citc_workspaceId = _messages.StringField(4)
  cloudRepo_aliasName = _messages.StringField(5)
  cloudRepo_repoId_projectRepoId_projectId = _messages.StringField(6)
  cloudRepo_repoId_projectRepoId_repoName = _messages.StringField(7)
  cloudRepo_repoId_uid = _messages.StringField(8)
  cloudRepo_revisionId = _messages.StringField(9)
  gerrit_aliasName = _messages.StringField(10)
  gerrit_gerritProject = _messages.StringField(11)
  gerrit_hostUri = _messages.StringField(12)
  gerrit_revisionId = _messages.StringField(13)
  git_revisionId = _messages.StringField(14)
  git_url = _messages.StringField(15)
  name = _messages.StringField(16, required=True)
  pageSize = _messages.IntegerField(17)
  pageToken = _messages.StringField(18)
  path = _messages.StringField(19, required=True)
  piper_branchName = _messages.StringField(20)
  piper_changeNumber = _messages.IntegerField(21)
  piper_disableComponents = _messages.BooleanField(22)
  piper_versionMap = _messages.BytesField(23)
  projectId = _messages.StringField(24, required=True)
  repoName = _messages.StringField(25, required=True)
  snapshotId = _messages.StringField(26)
  startPosition = _messages.IntegerField(27)
  uid = _messages.StringField(28)


class SourceProjectsReposWorkspacesGetRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesGetRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  name = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)
  uid = _messages.StringField(4)


class SourceProjectsReposWorkspacesListRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesListRequest object.

  Fields:
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  projectId = _messages.StringField(1, required=True)
  repoName = _messages.StringField(2, required=True)
  uid = _messages.StringField(3)


class SourceProjectsReposWorkspacesModifyWorkspaceRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesModifyWorkspaceRequest object.

  Fields:
    modifyWorkspaceRequest: A ModifyWorkspaceRequest resource to be passed as
      the request body.
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  modifyWorkspaceRequest = _messages.MessageField('ModifyWorkspaceRequest', 1)
  name = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  repoName = _messages.StringField(4, required=True)


class SourceProjectsReposWorkspacesRefreshWorkspaceRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesRefreshWorkspaceRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    refreshWorkspaceRequest: A RefreshWorkspaceRequest resource to be passed
      as the request body.
    repoName: The name of the repo. Leave empty for the default repo.
  """

  name = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  refreshWorkspaceRequest = _messages.MessageField('RefreshWorkspaceRequest', 3)
  repoName = _messages.StringField(4, required=True)


class SourceProjectsReposWorkspacesResolveFilesRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesResolveFilesRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    resolveFilesRequest: A ResolveFilesRequest resource to be passed as the
      request body.
  """

  name = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)
  resolveFilesRequest = _messages.MessageField('ResolveFilesRequest', 4)


class SourceProjectsReposWorkspacesRevertRefreshRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesRevertRefreshRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    revertRefreshRequest: A RevertRefreshRequest resource to be passed as the
      request body.
  """

  name = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)
  revertRefreshRequest = _messages.MessageField('RevertRefreshRequest', 4)


class SourceProjectsReposWorkspacesSnapshotsFilesGetRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesSnapshotsFilesGetRequest object.

  Fields:
    citc_branchName: See PiperDepotSourceContext.branch_name for
      documentation.
    citc_isBaseline: If true, ignore local workspace changes and use the
      baseline of the workspace instead.
    citc_snapshotVersion: The snapshot within the workspace. If zero, refers
      to the moving head of the workspace.  Clients which use zero should be
      robust against remote changes made to a workspace.  If non-zero, refers
      to an immutable CitC snapshot.  The current snapshot_version for USER's
      CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/snapshot_version
    citc_workspaceId: A unique identifier for a citc workspace. The
      workspace_id for USER's CLIENT can be found in
      /google/src/cloud/USER/CLIENT/.citc/workspace_id
    cloudRepo_aliasName: The name of an alias (branch, tag, etc.).
    cloudRepo_repoId_projectRepoId_projectId: The ID of the project.
    cloudRepo_repoId_projectRepoId_repoName: The name of the repo. Leave empty
      for the default repo.
    cloudRepo_repoId_uid: A server-assigned, globally unique identifier.
    cloudRepo_revisionId: A revision ID.
    gerrit_aliasName: The name of an alias (branch, tag, etc.).
    gerrit_gerritProject: The full project name within the host. Projects may
      be nested, so "project/subproject" is a valid project name. The "repo
      name" is hostURI/project.
    gerrit_hostUri: The URI of a running Gerrit instance.
    gerrit_revisionId: A revision (commit) ID.
    git_revisionId: Git commit hash. required.
    git_url: Git repository URL.
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page, or if using start_index.
    path: Path to the file or directory from the root directory of the source
      context. It must not have leading or trailing slashes.
    piper_branchName: Specifies that the source context refers to a branch,
      rather than the depot root.  For example, if the branch files live under
      //depot/branches/mybranch/25, then branch_name should be "mybranch/25".
    piper_changeNumber: CL number. If zero, represents depot head.
    piper_disableComponents: If false, use the released components as of the
      CL. If true, use true head.
    piper_versionMap: The complete components state description. If present,
      disable_components is ignored.  Not all services accept arbitrary
      version map.  Services not supporting arbitrary version maps must emit
      an error if this field is set, instead of silently falling back on
      disable_components.  This is a serialized VersionMap from
      //devtools/components/proto/version_map.proto. We use bytes instead of
      the actual type to avoid having a file under //google depend on one
      outside of //google.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    snapshotId: The ID of the snapshot. An empty snapshot_id refers to the
      most recent snapshot.
    startPosition: If path refers to a file, the position of the first byte of
      its contents to return. If path refers to a directory, the position of
      the first entry in the listing. If page_token is specified, this field
      is ignored.
    uid: A server-assigned, globally unique identifier.
  """

  citc_branchName = _messages.StringField(1)
  citc_isBaseline = _messages.BooleanField(2)
  citc_snapshotVersion = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  citc_workspaceId = _messages.StringField(4)
  cloudRepo_aliasName = _messages.StringField(5)
  cloudRepo_repoId_projectRepoId_projectId = _messages.StringField(6)
  cloudRepo_repoId_projectRepoId_repoName = _messages.StringField(7)
  cloudRepo_repoId_uid = _messages.StringField(8)
  cloudRepo_revisionId = _messages.StringField(9)
  gerrit_aliasName = _messages.StringField(10)
  gerrit_gerritProject = _messages.StringField(11)
  gerrit_hostUri = _messages.StringField(12)
  gerrit_revisionId = _messages.StringField(13)
  git_revisionId = _messages.StringField(14)
  git_url = _messages.StringField(15)
  name = _messages.StringField(16, required=True)
  pageSize = _messages.IntegerField(17)
  pageToken = _messages.StringField(18)
  path = _messages.StringField(19, required=True)
  piper_branchName = _messages.StringField(20)
  piper_changeNumber = _messages.IntegerField(21)
  piper_disableComponents = _messages.BooleanField(22)
  piper_versionMap = _messages.BytesField(23)
  projectId = _messages.StringField(24, required=True)
  repoName = _messages.StringField(25, required=True)
  snapshotId = _messages.StringField(26, required=True)
  startPosition = _messages.IntegerField(27)
  uid = _messages.StringField(28)


class SourceProjectsReposWorkspacesSnapshotsGetRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesSnapshotsGetRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    snapshotId: The ID of the snapshot to get. If empty, the most recent
      snapshot is retrieved.
    uid: A server-assigned, globally unique identifier.
  """

  name = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  repoName = _messages.StringField(3, required=True)
  snapshotId = _messages.StringField(4, required=True)
  uid = _messages.StringField(5)


class SourceProjectsReposWorkspacesSnapshotsListRequest(_messages.Message):
  """A SourceProjectsReposWorkspacesSnapshotsListRequest object.

  Fields:
    name: The unique name of the workspace within the repo.  This is the name
      chosen by the client in the Source API's CreateWorkspace method.
    pageSize: The maximum number of values to return.
    pageToken: The value of next_page_token from the previous call. Omit for
      the first page.
    projectId: The ID of the project.
    repoName: The name of the repo. Leave empty for the default repo.
    uid: A server-assigned, globally unique identifier.
  """

  name = _messages.StringField(1, required=True)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectId = _messages.StringField(4, required=True)
  repoName = _messages.StringField(5, required=True)
  uid = _messages.StringField(6)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" or "email:<ldap>" to
      include in api requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class Workspace(_messages.Message):
  """A Cloud Workspace stores modified files before they are committed to a
  repo. This message contains metadata. Use the Read or
  ReadFromWorkspaceOrAlias methods to read files from the workspace, and use
  ModifyWorkspace to change files.

  Fields:
    alias: The alias associated with the workspace. When the workspace is
      committed, this alias will be moved to point to the new revision.
    baseline: The revision of the workspace's alias when the workspace was
      created.
    changedFiles: The set of files modified in this workspace.
    currentSnapshotId: If non-empty, current_snapshot_id refers to the most
      recent update to the workspace.
    id: The ID of the workspace.
    mergeInfo: Information needed to manage a refresh or merge operation.
      Present only during a merge (i.e. after a call to Merge) or a call to
      RefreshWorkspace which results in conflicts.
  """

  alias = _messages.StringField(1)
  baseline = _messages.StringField(2)
  changedFiles = _messages.MessageField('ChangedFileInfo', 3, repeated=True)
  currentSnapshotId = _messages.StringField(4)
  id = _messages.MessageField('CloudWorkspaceId', 5)
  mergeInfo = _messages.MessageField('MergeInfo', 6)


class WriteAction(_messages.Message):
  """Create or modify a file.

  Enums:
    ModeValueValuesEnum: The new mode of the file.

  Fields:
    contents: The new contents of the file.
    mode: The new mode of the file.
    path: The path of the file to write.
  """

  class ModeValueValuesEnum(_messages.Enum):
    """The new mode of the file.

    Values:
      FILE_MODE_UNSPECIFIED: No file mode was specified.
      NORMAL: Neither a symbolic link nor executable.
      SYMLINK: A symbolic link.
      EXECUTABLE: An executable.
    """
    FILE_MODE_UNSPECIFIED = 0
    NORMAL = 1
    SYMLINK = 2
    EXECUTABLE = 3

  contents = _messages.BytesField(1)
  mode = _messages.EnumField('ModeValueValuesEnum', 2)
  path = _messages.StringField(3)


encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'source')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'source')
encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'source')
